name: 'Test Extension'
on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            test_command: 'xvfb-run -a npm test'
          - os: windows-latest
            test_command: 'npm test'
          - os: macOS-latest
            test_command: 'npm test'
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.17.1'
      - run: npm install
      - name: Configure APT cache directory
        if: runner.os == 'Linux'
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/archives/partial"
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/99-custom-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/99-custom-cache
      - name: Generate APT Packages List
        if: runner.os == 'Linux'
        run: |
          echo "build-essential xvfb clang libdbus-1-dev libgtk-3-dev libnotify-dev libasound2-dev libcap-dev libcups2-dev libxtst-dev libxss1 libnss3-dev gcc-multilib g++-multilib curl gperf bison python3-dbusmock openjdk-8-jre" > apt-packages.txt
      - name: Cache APT libraries
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: ~/apt-cache/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('apt-packages.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-
      - name: Install APT libraries
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y $(cat apt-packages.txt)
      - name: Run Tests
        run: ${{ matrix.test_command }}
